# Семинар 5 от 03.02.2022

# 52. Дана последовательность чисел. Получить список уникальных элементов заданной последовательности.

# sequence_of_numbers = '1 2 4 3 87 33 5 2 8 15 2 23 56 87 7 1 38'.split() 
# # unique = map(int, sequence_of_numbers)
# list_unique = list(set(map(int, sequence_of_numbers)))
# print(list_unique)
# # list_unique.sort()
# # print(f'{list_unique}')

# 53. Задана натуральная степень k. Сформировать случайным образом список коэффициентов \
# (значения от 0 до 100) многочлена и записать в файл многочлен степени k. \
# *Пример: k=2 => 2*x² + 4*x + 5 = 0 или x² + 5 = 0 или 10*x² = 0

# degreeK = 


# 54. Даны два файла в каждом из которых находится запись многочлена. \
# Сформировать файл содержащий сумму многочленов.

# m1 = '2*x² + 4*x + 5 = 0'.split()
# m2 = 'x² + 5 = 0'.split()
# m = 
# print(m)

# 55. В файле находится N натуральных чисел, записанных через пробел. \
# Среди чисел не хватает одного, чтобы выполнялось условие A[i] - 1 = A[i-1]. Найти его.
numbers = '1 2 5 3 4 7'.split() 


# 56. Дан список чисел. Выделить среди них числа, удовлетворяющие условию: \
# следующее больше предыдущего. Пример: [1, 5, 2, 3, 4, 6, 1, 7] => [1, 2, 3] \
# или [1, 7] или [1, 6, 7] и т.д.

task_list = [1, 5, 2, 3, 4, 6, 1, 7]

new = [res for idx, res in enumerate(task_list[0:]) \
    if task_list[0] < task_list[idx] > task_list[idx - 1] + 1] # способ 2???
print(new)

def sort_max(task_list):
    idx = 0
    size = len(task_list) - 1
    while idx < size:
        if task_list[idx] <= task_list[idx + 1]:
            idx += 1
            continue
        else: 
            task_list.pop(idx + 1)
            size -=1
    return task_list

print(sort_max(task_list))


# 57. Дан список чисел. Выделить среди них максимальное количество чисел, \
# удовлетворяющих условию предыдущей задачи. \
# Пример: [1, 5, 2, 3, 4, 6, 1, 7] => [1, 2, 3, 4, 6, 7]
# new = [i for i in task_list if i <= i + 1]
# print(new)

# new = list(filter(lambda x: x + 1 > x and not x >= x + 2, task_list))
# print(new)

# 58. Напишите программу, удаляющую из текста все слова содержащие "абв".

# given_text = 'енот проабв из вепщк абвпро если аб не равно бв'
# word = 'абв'

# def delete_words(given_text, search_word):
#     count = 0
#     u = 0
#     if given_text.endswich(search_word):
#         print(given_text)
#     if given_text.startswich(search_word):
#         print(given_text)

# delete_words(given_text, word)

# print(given_text)
# # if 'абв' in given_text.replace('абв', ''):
# n = given_text.replace('абв', '')
# print(n)

# 59. Помните игру с конфетами из модуля "Математика и Информатика"? \
# Создайте такую игру для игры человек против человека
    # Добавьте игру против бота
    # Подумайте как наделить бота "интеллектом" 

# 60. Вы когда-нибудь играли в игру "Крестики-нолики"? Попробуйте создать её.

# 61. Написать программу вычисления арифметического выражения заданного строкой. \
# Используются операции +,-,/,*. приоритет операций стандартный. \
# Пример: 2+2 => 4; 1+2*3 => 7; 1-2*3 => -6; 
# Добавить возможность использования скобок, меняющих приоритет операций. \
# Пример: 1+2*3 => 7; (1+2)*3 => 9;

# 62. Реализовать RLE алгоритм. реализовать модуль сжатия и восстановления данных.
# входные и выходные данные хранятся в отдельных файлах
